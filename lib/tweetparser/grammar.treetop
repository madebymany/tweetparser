grammar TweetContent
  rule tweet
    (url / html / space / newline / list / username / hashtag / slash / text)* {
      def content
        elements.map{ |e| e.content }
      end
    }
  end

  # Partial components

  rule ascii_letter
    [a-zA-Z]
  end

  rule digit
    [0-9]
  end

  rule non_ascii
    [^\x20-\x7F]
  end

  rule hyphen
    "-"
  end

  rule underscore
    "_"
  end

  rule at_sign
    "@" / "＠"
  end

  rule hash_sign
    "#" / "＃"
  end

  rule subdomain
    (ascii_letter / digit / hyphen / non_ascii)+
  end

  rule tld
    ascii_letter ascii_letter+
  end

  rule ascii_name
    (ascii_letter / digit / underscore)+
  end

  rule ascii_name_with_letters
    ascii_letter (ascii_letter / digit / underscore)* / (digit / underscore)+ ascii_letter (ascii_letter / digit / underscore)*
  end

  rule protocol
    [hH] [tT] [tT] [pP] [sS]? "://"
  end

  rule path_component
    [a-zA-Z0-9?=\-_&%();:\.,~+/]
  end

  # Outputs

  rule url
    (protocol / [Ww] [Ww] [Ww] ".") (subdomain ".")+ tld (":" [0-9]+)? ("/" path_component*)? ("#" path_component*)? {
      def content
        [:url, text_value]
      end
    }
  end

  rule username
    at_sign ascii_name !(at_sign / underscore) {
      def content
        [:username, text_value]
      end
    }
  end

  rule list
    username "/" ascii_name {
      def content
        [:list, text_value]
      end
    }
  end

  rule hashtag
    hash_sign ascii_name_with_letters {
      def content
        [:hashtag, text_value]
      end
    }
  end

  rule slash
    "/" ascii_name {
      def content
        [:slash, text_value]
      end
    }
  end

  rule text
    [\S]+ {
      def content
        [:text, text_value]
      end
    }
  end

  rule html
    "<" [^>]+ ">" {
      def content
        [:html, text_value]
      end
    }
  end

  rule newline
    "\r"? "\n" {
      def content
        [:newline, text_value]
      end
    }
  end

  rule space
    (" " / "　")+ {
      def content
        [:space, text_value]
      end
    }
  end
end
